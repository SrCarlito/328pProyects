
InterruptionsExt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000793  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
			
		}
    }
}

ISR(INT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	retardo = retardo +50;
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ac:	c2 96       	adiw	r24, 0x32	; 50
  ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_2>:

ISR(INT1_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	retardo = retardo-50;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  da:	c2 97       	sbiw	r24, 0x32	; 50
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <function_retardo>:



void function_retardo(){
	for(int a = retardo; a <=2000;a++){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fa:	81 3d       	cpi	r24, 0xD1	; 209
  fc:	27 e0       	ldi	r18, 0x07	; 7
  fe:	92 07       	cpc	r25, r18
 100:	5c f4       	brge	.+22     	; 0x118 <function_retardo+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	e9 ef       	ldi	r30, 0xF9	; 249
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <function_retardo+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <function_retardo+0x1a>
 10c:	00 00       	nop
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	81 3d       	cpi	r24, 0xD1	; 209
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	9f 07       	cpc	r25, r31
 116:	a9 f7       	brne	.-22     	; 0x102 <function_retardo+0x10>
 118:	08 95       	ret

0000011a <main>:

void function_retardo();

int main(void)
{
    cli();
 11a:	f8 94       	cli
	
	EICRA = (1<<ISC11); 
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0X03;
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	8d bb       	out	0x1d, r24	; 29
	
	DDRB = 0xff;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 12a:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PORTD2)|(1<<PORTD3);
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	8b b9       	out	0x0b, r24	; 11
	
	sei();
 130:	78 94       	sei

    while (1) {
		for(int x = 0; x <256; x++)
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PORTB = x;
 136:	c5 b9       	out	0x05, r28	; 5
			function_retardo();
 138:	0e 94 79 00 	call	0xf2	; 0xf2 <function_retardo>
	PORTD = (1<<PORTD2)|(1<<PORTD3);
	
	sei();

    while (1) {
		for(int x = 0; x <256; x++)
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	c1 15       	cp	r28, r1
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	d8 07       	cpc	r29, r24
 144:	c1 f7       	brne	.-16     	; 0x136 <main+0x1c>
 146:	f5 cf       	rjmp	.-22     	; 0x132 <main+0x18>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
